// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: gen-ai.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenAiService_GenerateTestFiles_FullMethodName        = "/codesourcerer_bot.genai.GenAiService/GenerateTestFiles"
	GenAiService_GenerateRetriedTestFiles_FullMethodName = "/codesourcerer_bot.genai.GenAiService/GenerateRetriedTestFiles"
)

// GenAiServiceClient is the client API for GenAiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenAiServiceClient interface {
	GenerateTestFiles(ctx context.Context, in *GithubContextRequest, opts ...grpc.CallOption) (*GeneratedTestsResponse, error)
	GenerateRetriedTestFiles(ctx context.Context, in *RetryMechanismPayload, opts ...grpc.CallOption) (*GeneratedTestsResponse, error)
}

type genAiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenAiServiceClient(cc grpc.ClientConnInterface) GenAiServiceClient {
	return &genAiServiceClient{cc}
}

func (c *genAiServiceClient) GenerateTestFiles(ctx context.Context, in *GithubContextRequest, opts ...grpc.CallOption) (*GeneratedTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratedTestsResponse)
	err := c.cc.Invoke(ctx, GenAiService_GenerateTestFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genAiServiceClient) GenerateRetriedTestFiles(ctx context.Context, in *RetryMechanismPayload, opts ...grpc.CallOption) (*GeneratedTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratedTestsResponse)
	err := c.cc.Invoke(ctx, GenAiService_GenerateRetriedTestFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenAiServiceServer is the server API for GenAiService service.
// All implementations must embed UnimplementedGenAiServiceServer
// for forward compatibility.
type GenAiServiceServer interface {
	GenerateTestFiles(context.Context, *GithubContextRequest) (*GeneratedTestsResponse, error)
	GenerateRetriedTestFiles(context.Context, *RetryMechanismPayload) (*GeneratedTestsResponse, error)
	mustEmbedUnimplementedGenAiServiceServer()
}

// UnimplementedGenAiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenAiServiceServer struct{}

func (UnimplementedGenAiServiceServer) GenerateTestFiles(context.Context, *GithubContextRequest) (*GeneratedTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTestFiles not implemented")
}
func (UnimplementedGenAiServiceServer) GenerateRetriedTestFiles(context.Context, *RetryMechanismPayload) (*GeneratedTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRetriedTestFiles not implemented")
}
func (UnimplementedGenAiServiceServer) mustEmbedUnimplementedGenAiServiceServer() {}
func (UnimplementedGenAiServiceServer) testEmbeddedByValue()                      {}

// UnsafeGenAiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenAiServiceServer will
// result in compilation errors.
type UnsafeGenAiServiceServer interface {
	mustEmbedUnimplementedGenAiServiceServer()
}

func RegisterGenAiServiceServer(s grpc.ServiceRegistrar, srv GenAiServiceServer) {
	// If the following call pancis, it indicates UnimplementedGenAiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenAiService_ServiceDesc, srv)
}

func _GenAiService_GenerateTestFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenAiServiceServer).GenerateTestFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenAiService_GenerateTestFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenAiServiceServer).GenerateTestFiles(ctx, req.(*GithubContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenAiService_GenerateRetriedTestFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryMechanismPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenAiServiceServer).GenerateRetriedTestFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenAiService_GenerateRetriedTestFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenAiServiceServer).GenerateRetriedTestFiles(ctx, req.(*RetryMechanismPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// GenAiService_ServiceDesc is the grpc.ServiceDesc for GenAiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenAiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codesourcerer_bot.genai.GenAiService",
	HandlerType: (*GenAiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTestFiles",
			Handler:    _GenAiService_GenerateTestFiles_Handler,
		},
		{
			MethodName: "GenerateRetriedTestFiles",
			Handler:    _GenAiService_GenerateRetriedTestFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gen-ai.proto",
}
